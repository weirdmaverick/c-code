
#include "bfloat16_mul.h"

unpacked_float bfloat16_mul(unpacked_float A, unpacked_float B)
{
  unpacked_float result;
  bool is_special = 0;
  bool is_inf     = 0;
  bool is_ovf_unf = 0;

  unsigned int unnormalized_exponent=0;
  unsigned int normalized_exponent=0;
  unsigned int unnormalized_mantissa=0;
  unsigned int normalized_mantissa=0;

  int normalize_iter = 0;

  //Check special case
  //Zero
  if( ((A.bfloat16.exponent == 0) & (A.bfloat16.mantissa == 0)) || ((B.bfloat16.exponent == 0) & (B.bfloat16.mantissa == 0)) )
  {
    result.bfloat16.exponent = 0;
    result.bfloat16.mantissa = 0;
    is_special = 1;
  }
  //Inf
  if( ((A.bfloat16.exponent == 255) & (A.bfloat16.mantissa == 0)) || ((B.bfloat16.exponent == 255) & (B.bfloat16.mantissa == 0)) )
  {
    result.bfloat16.exponent = 255;
    result.bfloat16.mantissa = 0;
    is_special = 1;
    is_inf     = 1;
  }
  //NaN
  if( !is_inf && (((A.bfloat16.exponent == 255) ) || ((B.bfloat16.exponent == 255))) )
  {
    result.bfloat16.exponent = 255;
    result.bfloat16.mantissa = 1;
    is_special = 1;
  }


  //Non-special case 
  //Compute sign 
  result.bfloat16.sign =  A.bfloat16.sign ^ B.bfloat16.sign;
  if(is_special == 0)
  {
  //Compute unnormalized exponent
    unnormalized_exponent = A.bfloat16.exponent + B.bfloat16.exponent -127;
  //Compute unnormalized exponent
     unnormalized_mantissa = (A.bfloat16.mantissa | 0x00000080) * (B.bfloat16.mantissa | 0x00000080);
  }

  //Normalize result
  normalized_exponent = unnormalized_exponent;
  normalized_mantissa = unnormalized_mantissa;
  while (normalize_iter<14)
  {
    //10.1xxxx ... Right shift
    if((normalized_mantissa & 0x00008000))
    {
      normalized_exponent= normalized_exponent + 1;
      normalized_mantissa= normalized_mantissa >> 1;
    }
    //0.001xxx.... Left shift
    else if( ~(normalized_mantissa & 0x00004000))
    {
      normalized_exponent= normalized_exponent - 1;
      normalized_mantissa= normalized_mantissa << 1;
    }
    //Normalize done
    else if ((normalized_mantissa & 0x00004000))
    {
      break;
    }
    normalize_iter++;
  }
  //Check result
  //Overflow
  if((!is_special) && (normalized_exponent > 254))
  {
    result.bfloat16.exponent = 254;
    result.bfloat16.mantissa = 127;
    is_ovf_unf = 1;
  }
  //Underflow
  if((!is_special) && (normalized_exponent < 1))
  {
    result.bfloat16.exponent = 1;
    result.bfloat16.mantissa = 0;
    is_ovf_unf = 1;
  }
  
  //Take result except special case
  if(!is_ovf_unf & !is_special)
  {
    result.bfloat16.exponent = normalized_exponent;
    result.bfloat16.mantissa = (normalized_mantissa>>7);
  }

  return result;
}
